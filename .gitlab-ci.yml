#image: emeraldsquad/dotnet-nodejs:latest
image: catharsium/dotnet_nodejs


variables:
  #EXE_RELEASE_FOLDER: 'YourApp\bin\Release'
  #MSI_RELEASE_FOLDER: 'Setup\bin\Release'
  #TEST_FOLDER: 'Tests\bin\Release'
  #DEPLOY_FOLDER: 'P:\Projects\YourApp\Builds'
  
  #NUGET_PATH: 'C:\NuGet\nuget.exe'
  #MSBUILD_PATH: 'C:\Program Files (x86)\MSBuild\14.0\Bin\msbuild.exe'
  #NUNIT_PATH: 'C:\Program Files (x86)\NUnit.org\nunit-console\nunit3-console.exe'

before_script:
  - npm install
  - dotnet restore


stages:
  - build
  - test
  #- deploy


build:
  stage: build
  #only:
  #  - tags # the build process will only be started by git tag commits
  script:
    - "dotnet build"
  #  - '& "$env:NUGET_PATH" restore' # restore Nuget dependencies
  #  - '& "$env:MSBUILD_PATH" /p:Configuration=Release' # build the project
  #artifacts:
  #  expire_in: 1 week # save gitlab server space, we copy the files we need to deploy folder later on
  #  paths:
  #    - '$env:EXE_RELEASE_FOLDER\YourApp.exe' # saving exe to copy to deploy folder
  #    - '$env:MSI_RELEASE_FOLDER\YourApp Setup.msi' # saving msi to copy to deploy folder
  #    - '$env:TEST_FOLDER\' # saving entire Test project so NUnit can run tests 


test:
  stage: test
  #only:
  #  - tags
  script:
    - "dotnet test"
  #  - '& "$env:NUNIT_PATH" ".\$env:TEST_FOLDER\Tests.dll"' # running NUnit tests
  #artifacts:
  #  expire_in: 1 week # save gitlab server space, we copy the files we need to deploy folder later on
  #  paths:
  #    - '.\TestResult.xml' # saving NUnit results to copy to deploy folder
  dependencies:
    - build


#deploy_job:
  #stage: deploy
  #only:
  #  - tags
  #script:
    # Compose a folder for each release based on commit tag.
    # Assuming your tag is Rev1.0.0.1, and your last commit message is 'First commit'
    # the artifact files will be copied to:
    # P:\Projects\YourApp\Builds\Rev1.0.0.1 - First commit\
  #  - '$commitSubject = git log -1 --pretty=%s'
   # - '$deployFolder = $($env:DEPLOY_FOLDER) + "\" + $($env:CI_BUILD_TAG) + " - " + $commitSubject + "\"'

    # xcopy takes care of recursively creating required folders
  #  - 'xcopy /y ".\$env:EXE_RELEASE_FOLDER\YourApp.exe" "$deployFolder"'
  #  - 'xcopy /y ".\$env:MSI_RELEASE_FOLDER\YourApp Setup.msi" "$deployFolder"'
  #  - 'xcopy /y ".\TestResult.xml" "$deployFolder"'

  #dependencies:
  #  - build_job
   # - test_job
  
#  pool:
#  vmImage: Hosted Windows Container
#Your build pipeline references an undefined variable named ‘Parameters.RestoreBuildProjects’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references an undefined variable named ‘Parameters.RestoreBuildProjects’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references the ‘BuildConfiguration’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references an undefined variable named ‘Parameters.TestProjects’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references the ‘BuildConfiguration’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references the ‘BuildConfiguration’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references the ‘BuildConfiguration’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references the ‘BuildConfiguration’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971

#steps:
#- task: DotNetCoreCLI@2
#  displayName: Restore
#  inputs:
#    command: restore
#    projects: '$(Parameters.RestoreBuildProjects)'

#- task: DotNetCoreCLI@2
#  displayName: Build
#  inputs:
#    projects: '$(Parameters.RestoreBuildProjects)'
#    arguments: '--configuration $(BuildConfiguration)'

#- task: DotNetCoreCLI@2
#  displayName: Test
#  inputs:
#    command: test
#    projects: '$(Parameters.TestProjects)'
#    arguments: '--configuration $(BuildConfiguration)'

#- task: DotNetCoreCLI@2
#  displayName: 'Publish <Catharsium.Util>'
#  inputs:
#    command: publish
#    publishWebProjects: false
#    projects: '**/Catharsium.Util.csproj'
#    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
#    zipAfterPublish: True

#- task: DotNetCoreCLI@2
#  displayName: 'Publish <Catharsium.Util.IO>'
#  inputs:
#    command: publish
#    publishWebProjects: false
#    projects: '**/Catharsium.Util.IO.csproj'
#    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
#    zipAfterPublish: True

#- task: DotNetCoreCLI@2
#  displayName: 'Publish <Catharsium.Util.Testing>'
#  inputs:
#    command: publish
#    publishWebProjects: false
#    projects: '**/Catharsium.Util.Testing.csproj'
#    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
#    zipAfterPublish: True

#- task: DotNetCoreCLI@2
#  displayName: Pack
#  inputs:
#    command: pack
#    versioningScheme: byPrereleaseNumber

#- task: PublishBuildArtifacts@1
#  displayName: 'Publish Artifact'
#  inputs:
#    PathtoPublish: '$(build.artifactstagingdirectory)'
#    ArtifactName: Catharsium.Util

#- task: NuGetCommand@2
#  displayName: 'NuGet push'
#  inputs:
#    command: push
#    feedsToUse: config
#    nuGetFeedType: external
#    publishFeedCredentials: NuGet.org
